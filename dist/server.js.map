{"version":3,"sources":["../server.js"],"names":["server","require","Server","ws","port","verifyClient","socketverify","info","num","dialogData","type","msg","time","i","on","socket","console","log","a","setInterval","timeout","send","JSON","stringify","length","clearInterval","close","error","open","err"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAIA,SAASC,QAAQ,IAAR,EAAcC,MAA3B;AACA,IAAIC,KAAK,IAAIH,MAAJ,CAAW;AAChBI,UAAK,IADW;AAEhBC,kBAAaC;AAFG,CAAX,CAAT;;AAKA,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,WAAO,IAAP;AACH;;AAED,IAAIC,MAAM,EAAV;AACA,IAAIC,aAAa,CACb;AACIC,UAAK,KADT;AAEIC,SAAI,IAFR;AAGIC,UAAM;AAHV,CADa,EAKX;AACEF,UAAK,OADP;AAEEC,SAAI;AAFN,CALW,EAQX;AACED,UAAK,KADP;AAEEC,SAAI,YAFN;AAGEC,UAAM;AAHR,CARW,EAYX;AACEF,UAAK,OADP;AAEEC,SAAI;AAFN,CAZW,EAeX;AACED,UAAK,KADP;AAEEC,SAAI,6CACJ,yCAHF;AAIEC,UAAM;AAJR,CAfW,EAoBX;AACEF,UAAK,OADP;AAEEC,SAAI;AAFN,CApBW,EAuBX;AACED,UAAK,KADP;AAEEC,SAAI,eAFN;AAGEC,UAAM;AAHR,CAvBW,EA2BX;AACEF,UAAK,OADP;AAEEC,SAAI,wDACJ;AAHF,CA3BW,EA+BX;AACED,UAAK,KADP;AAEEC,SAAI,eAFN;AAGEC,UAAM;AAHR,CA/BW,CAAjB;;AAsCA;AACA,IAAIC,IAAI,CAAR;;AAEAV,GAAGW,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;AAClCC,YAAQC,GAAR,CAAY,UAAZ;AACAF,WAAOD,EAAP,CAAU,SAAV,EAAqB,UAAUH,GAAV,EAAe;AAChCK,gBAAQC,GAAR,CAAY,SAAZ,EAAuBN,GAAvB;AACAK,gBAAQC,GAAR,CAAY,YAAZ;;AAEA;AACA,YAAIC,IAAIC,YAAY,SAASC,OAAT,GAAmB;AACnCL,mBAAOM,IAAP,CAAYC,KAAKC,SAAL,CAAed,WAAWI,CAAX,CAAf,CAAZ;AACAG,oBAAQC,GAAR,CAAY,GAAZ,EAAiBJ,CAAjB;AACAA,gBAAIA,IAAI,CAAR;AACA,gBAAGA,KAAKJ,WAAWe,MAAnB,EAA0B;AACtBR,wBAAQC,GAAR,CAAY,QAAZ,EAAqBJ,CAArB,EAAwBJ,WAAWe,MAAnC;AACAT,uBAAOM,IAAP,CAAY,OAAZ;AACAI,8BAAcP,CAAd;AACAL,oBAAI,CAAJ;AACH;AACJ,SAVO,EAUL,IAVK,CAAR;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KA1BD;AA2BAE,WAAOD,EAAP,CAAU,OAAV,EAAmBY,KAAnB;AACAX,WAAOD,EAAP,CAAU,OAAV,EAAmBa,KAAnB;AACAZ,WAAOD,EAAP,CAAU,MAAV,EAAkB,SAASc,IAAT,GAAgB;AAC9BZ,gBAAQC,GAAR,CAAY,OAAZ;AAEH,KAHD;AAIH,CAnCD;AAoCA,SAASS,KAAT,GAAiB;AACbV,YAAQC,GAAR,CAAY,UAAZ;AACH;AACD,SAASU,KAAT,CAAeE,GAAf,EAAoB;AAChBb,YAAQC,GAAR,CAAY,OAAZ,EAAoBY,GAApB;AACH","file":"server.js","sourcesContent":["// var http = require(\"http\");\n// http.createServer(function (request, response) {\n//\n//\n//     // 发送 HTTP 头部\n//     // HTTP 状态值: 200 : OK\n//     // 内容类型: text/plain\n//     response.writeHead(200, {'Content-Type': 'text/plain'});\n//     // 发送响应数据 \"Hello World\"\n//     response.end('Hello World\\n');\n// }).listen(8003);\n\n// 终端打印如下信息\n// console.log('Server running at http://localhost:8003/');\n\nvar server = require('ws').Server;\nvar ws = new server({\n    port:8003,\n    verifyClient:socketverify,\n});\n\nfunction socketverify(info) {\n    return true\n}\n\nvar num = [];\nvar dialogData = [\n    {\n        type:'bot',\n        msg:'你好',\n        time: '2018-11-27 12:23:23'\n    },{\n        type:'human',\n        msg:'你好'\n    },{\n        type:'bot',\n        msg:'请问您最近需要贷款么',\n        time: '2018-11-27 12:23:23'\n    },{\n        type:'human',\n        msg:'不需要'\n    },{\n        type:'bot',\n        msg:'本公司现在经营无抵押贷款业务，快速审核，快速放款，本公司现在经营无抵押贷款业务,' +\n        '本公司现在经营无抵押贷款业务，快速审核，快速放款，本公司现在经营无抵押贷款业务',\n        time: '2018-11-27 12:23:23'\n    },{\n        type:'human',\n        msg:'不好意思，不需要'\n    },{\n        type:'bot',\n        msg:'好的，打扰了，祝您生活愉快',\n        time: '2018-11-27 12:23:23'\n    },{\n        type:'human',\n        msg:'不好意思，本公司现在经营无抵押贷款业务，快速审核，快速放款，本公司现在经营无抵押贷款业务,\\' +\\n' +\n        '        \\'本公司现在经营无抵押贷款业务'\n    },{\n        type:'bot',\n        msg:'好的，打扰了，祝您生活愉快',\n        time: '2018-11-27 12:23:23'\n    }\n];\n\n// 由于setInterval的定时代码是在全局作用域下执行的\nvar i = 0;\n\nws.on('connection', function (socket) {\n    console.log('服务端链接成功！');\n    socket.on('message', function (msg) {\n        console.log('服务端收到消息', msg);\n        console.log('开始向客户端发送数据');\n\n        // 遍历dialogData\n        var a = setInterval(function timeout() {\n            socket.send(JSON.stringify(dialogData[i]));\n            console.log('i', i)\n            i = i + 1\n            if(i >= dialogData.length){\n                console.log('超过内容上限',i, dialogData.length)\n                socket.send('close');\n                clearInterval(a)\n                i = 0\n            }\n        }, 1200);\n\n        // console.log('测试检测out', )\n        // for(var i=0; i<dialogData.length;i++){\n        //     console.log('测试检测+',i )\n        //     socket.send(i)\n        // }\n        // function test() {\n        //     console.log('测试检测in' )\n        // }\n        // test()\n    })\n    socket.on('close', close)\n    socket.on('error', error)\n    socket.on('open', function open() {\n        console.log('服务端开始', );\n\n    })\n})\nfunction close() {\n    console.log('服务端close')\n}\nfunction error(err) {\n    console.log('服务端报错',err)\n}\n"]}